name: Production Pipeline
on: 
  push:
    branches:
      - master
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
  Publish-Release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      with:
        semantic_version: 19.0.5
        branches: |
          [
            '+([0-9])?(.{+([0-9]),x}).x',
            'master',
            'next',
            'next-major',
            {
              name: 'beta',
              prerelease: true
            },
            {
              name: 'alpha',
              prerelease: true
            }
          ]
        extra_plugins: |
          @semantic-release/git
          @semantic-release/exec
          @semantic-release/changelog 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Echo new release published
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        echo ${{ steps.semantic.outputs.new_release_version }}
        echo ${{ steps.semantic.outputs.new_release_major_version }}
        echo ${{ steps.semantic.outputs.new_release_minor_version }}
        echo ${{ steps.semantic.outputs.new_release_patch_version }}
  Build-IOS-Release:
    needs: [Publish-Release]
    runs-on: ubuntu-latest
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v3
      - name: üèó Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      - name: üèó Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: üì¶ Install dependencies
        run: yarn install
      - name: üöÄ Build app
        run: eas build:ios
  Publish-To-Testflight:
    needs: [Build-IOS-Release]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - uses: actions/setup-java@v1.4.3
        with:
          java-version: '9.0.4' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - uses: sinoru/actions-setup-xcode@v1.1.2
        with:
          xcode-version: '11.2.1' # Exact version of a Xcode version to use
          apple-id: ${{ secrets.EXPO_APPLE_ID }} # Apple ID to download from Apple Developer when Xcode not available in local
          apple-id-password: ${{ secrets.EXPO_APPLE_PASSWORD }}
      - uses: expo/expo-github-action@v5
        with:
          expo-version: 3.x
          expo-username: ${{ secrets.EXPO_CLI_USERNAME }}
          expo-password: ${{ secrets.EXPO_CLI_PASSWORD }}
      - name: Install deps
        run: yarn install
      - uses: jakemwood/expo-apple-2fa@main
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        with:
          expo_apple_id: ${{ secrets.EXPO_APPLE_ID }}
          expo_apple_password: ${{ secrets.EXPO_APPLE_PASSWORD }}
          app_specific_password: ${{ secrets.EXPO_APP_SPECIFIC_PASSWORD }}
          tfa_phone_number: "+11 (123) 456-6789"

